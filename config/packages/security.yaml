security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#Ce hacheur sélectionne automatiquement l'algorithme le plus sécurisé disponible sur notre système
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider


    # provider: pour dire où sont les données utilisateurs pour dire où sont les données utilisateurs
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            #login formulaire
            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

# Dans la partie access_control nous définissons les routes protégées
    access_control:
     #    - { path: ^/admin, roles: ROLE_ADMIN }
     #    - { path: ^/profile, roles: ROLE_USER }

# La partie role_hierarchy contient la hiérarchie des rôles
    role_hierarchy:
        ROLE_LIVREUR: ROLE_USER
        ROLE_OPERATEUR: ROLE_USER
        ROLE_TRAFFIC_MANAGER: ROLE_LIVREUR
        ROLE_ADMIN: ROLE_OPERATEUR ,ROLE_TRAFFIC_MANAGER
    
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
